name: Build Extension

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Get version information
        id: get_version
        run: |
          # Get version from manifest.json
          MANIFEST_VERSION=$(python3 -c "
          import json
          with open('src/manifest.json', 'r') as f:
              manifest = json.load(f)
          print(manifest['version'])
          ")

          # Get latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # If this is a tag push, use that tag
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_VERSION="${{ github.ref_name }}"
          else
            TAG_VERSION="v${MANIFEST_VERSION}"
          fi

          echo "version=${MANIFEST_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_VERSION}" >> $GITHUB_OUTPUT
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

          echo "üìã Version Information:"
          echo "  Manifest Version: ${MANIFEST_VERSION}"
          echo "  Tag Version: ${TAG_VERSION}"
          echo "  Latest Git Tag: ${LATEST_TAG}"

      - name: Validate manifest.json
        run: |
          python3 -c "
          import json
          with open('src/manifest.json', 'r') as f:
              manifest = json.load(f)
          print(f'Extension: {manifest[\"name\"]} v{manifest[\"version\"]}')
          print('Manifest validation: ‚úÖ Valid JSON')

          # Validate required fields
          required_fields = ['manifest_version', 'name', 'version', 'description']
          for field in required_fields:
              if field not in manifest:
                  print(f'‚ùå Missing required field: {field}')
                  exit(1)
          print('‚úÖ All required fields present')
          "

      - name: Build extension package
        run: |
          python3 scripts/create-zip.py

      - name: Check package contents
        run: |
          shopt -s nullglob
          files=(youtube-blur-remover-v*-webstore.zip)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Package creation failed ‚ùå (no matching youtube-blur-remover-v*-webstore.zip)"
            echo "Directory listing for diagnostics:" 
            ls -1
            exit 1
          fi
          ZIP_FILE="${files[0]}"
          echo "Package created successfully ‚úÖ -> ${ZIP_FILE}"
          echo "package_name=${ZIP_FILE}" >> $GITHUB_ENV
          echo "::notice file=scripts/create-zip.py::Detected package ${ZIP_FILE}"

          echo "üì¶ Package Contents:"
          unzip -l "${ZIP_FILE}"

          echo "üìè Package Size:"
          ls -lh "${ZIP_FILE}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: youtube-blur-remover-extension-${{ steps.get_version.outputs.version }}
          path: youtube-blur-remover-v*-webstore.zip
          retention-days: 90

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g jshint

      - name: Lint JavaScript files
        run: |
          echo "Linting JavaScript files..."
          jshint src/*.js --config .jshintrc || echo "‚ö†Ô∏è  JSHint warnings found"
          echo "Lint check completed"

      - name: Check file structure
        run: |
          echo "Checking required files..."
          required_files=("src/manifest.json" "src/content.js" "src/background.js" "src/popup.html" "src/popup.js" "LICENSE" "README.md")

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file"
            else
              echo "‚ùå Missing: $file"
              exit 1
            fi
          done

          echo "All required files present ‚úÖ"

  release:
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: youtube-blur-remover-extension-${{ needs.build.outputs.version }}

      - name: Extract changelog for release
        id: changelog
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          echo "Extracting changelog for version ${VERSION}..."

          # Extract changelog section for this version
          python3 << 'EOF'
          import re
          import sys

          version = "${{ needs.build.outputs.version }}"

          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()
              
              # Find the section for this version
              pattern = rf"## \[{re.escape(version)}\].*?\n(.*?)(?=\n## \[|\n#[^#]|\Z)"
              match = re.search(pattern, content, re.DOTALL)
              
              if match:
                  changelog_text = match.group(1).strip()
                  # Clean up the text and format for GitHub release
                  changelog_text = re.sub(r'\n### ', '\n\n### ', changelog_text)
                  changelog_text = re.sub(r'\n- ', '\n‚Ä¢ ', changelog_text)
                  
                  # Write to file for GitHub Actions
                  with open('release_notes.md', 'w') as f:
                      f.write(f"# YouTube Blur Remover v{version}\n\n")
                      f.write("## What's New\n\n")
                      f.write(changelog_text)
                      f.write("\n\n## Installation\n\n")
                      f.write("1. Download the `youtube-blur-remover-v{}.zip` file\n".format(version))
                      f.write("2. Go to `chrome://extensions/` in Chrome\n")
                      f.write("3. Enable 'Developer mode'\n")
                      f.write("4. Click 'Load unpacked' and select the extracted folder\n\n")
                      f.write("Or install from the [Chrome Web Store](https://chrome.google.com/webstore) (coming soon)\n\n")
                      f.write("## Support\n\n")
                      f.write("üíñ Support this free extension: [Ko-fi](https://ko-fi.com/presdec)\n")
                      f.write("üêõ Report issues: [GitHub Issues](https://github.com/presdec/youtube-blur-remover/issues)\n")
                  
                  print("‚úÖ Changelog extracted successfully")
              else:
                  print(f"‚ö†Ô∏è  No changelog found for version {version}")
                  # Create basic release notes
                  with open('release_notes.md', 'w') as f:
                      f.write(f"# YouTube Blur Remover v{version}\n\n")
                      f.write("New release of the YouTube Blur Remover extension.\n")
                  
          except Exception as e:
              print(f"‚ùå Error extracting changelog: {e}")
              sys.exit(1)
          EOF

          echo "üìù Release notes created:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: YouTube Blur Remover ${{ needs.build.outputs.version }}
          body_path: release_notes.md
          files: |
            youtube-blur-remover-v*.zip
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          echo "üéâ Release ${{ needs.build.outputs.tag }} created successfully!"
          echo "üì¶ Extension package uploaded"
          echo "üìù Changelog notes added"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build.outputs.tag }}"
