name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Additional release notes (optional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Calculate new version
        id: version
        run: |
          # Get current version from manifest.json
          CURRENT_VERSION=$(python3 -c "
          import json
          with open('src/manifest.json', 'r') as f:
              manifest = json.load(f)
          print(manifest['version'])
          ")

          # Calculate new version
          NEW_VERSION=$(python3 -c "
          import sys
          version = '${CURRENT_VERSION}'
          parts = list(map(int, version.split('.')))

          if '${{ github.event.inputs.version_type }}' == 'major':
              parts[0] += 1
              parts[1] = 0
              parts[2] = 0
          elif '${{ github.event.inputs.version_type }}' == 'minor':
              parts[1] += 1
              parts[2] = 0
          elif '${{ github.event.inputs.version_type }}' == 'patch':
              parts[2] += 1

          print('.'.join(map(str, parts)))
          ")

          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${NEW_VERSION}" >> $GITHUB_OUTPUT

          echo "üìã Version Information:"
          echo "  Current: ${CURRENT_VERSION}"
          echo "  New: ${NEW_VERSION}"
          echo "  Type: ${{ github.event.inputs.version_type }}"

      - name: Update version files
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update manifest.json
          python3 -c "
          import json
          with open('src/manifest.json', 'r') as f:
              manifest = json.load(f)

          manifest['version'] = '${NEW_VERSION}'

          with open('src/manifest.json', 'w') as f:
              json.dump(manifest, f, indent=2)
              f.write('\n')
          "

          # Update package.json
          python3 -c "
          import json
          with open('package.json', 'r') as f:
              package = json.load(f)

          package['version'] = '${NEW_VERSION}'

          with open('package.json', 'w') as f:
              json.dump(package, f, indent=2)
              f.write('\n')
          "

          # Update build script
          sed -i "s/youtube-blur-remover-v[0-9]\+\.[0-9]\+\.[0-9]\+/youtube-blur-remover-v${NEW_VERSION}/g" scripts/create-zip.py

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)

          # Create new changelog entry
          python3 -c "
          import re

          version = '${NEW_VERSION}'
          date = '${TODAY}'
          release_notes = '''${{ github.event.inputs.release_notes }}'''

          with open('CHANGELOG.md', 'r') as f:
              content = f.read()

          # Find the [Unreleased] section
          unreleased_pattern = r'## \[Unreleased\](.*?)(?=\n## \[|\Z)'
          match = re.search(unreleased_pattern, content, re.DOTALL)

          if match:
              unreleased_content = match.group(1).strip()
              
              # Create new version section
              new_section = f'''## [Unreleased]

          ## [{version}] - {date}

          ### Added
          - Release created via GitHub Actions
          '''
              
              if release_notes:
                  new_section += f'''
          ### Notes
          {release_notes}
          '''
              
              if unreleased_content and unreleased_content != '':
                  # Move unreleased content to new version
                  new_section = new_section.replace('- Release created via GitHub Actions', unreleased_content)
              
              # Replace the unreleased section
              new_content = re.sub(
                  r'## \[Unreleased\].*?(?=\n## \[|\Z)',
                  new_section.strip(),
                  content,
                  flags=re.DOTALL
              )
              
              with open('CHANGELOG.md', 'w') as f:
                  f.write(new_content)
          "

      - name: Build extension
        run: |
          python3 scripts/create-zip.py

      - name: Commit and tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          git add src/manifest.json package.json scripts/create-zip.py CHANGELOG.md
          git commit -m "Release v${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"

      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.version.outputs.tag_name }}

      - name: Extract changelog for release
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          python3 -c "
          import re

          version = '${NEW_VERSION}'

          with open('CHANGELOG.md', 'r') as f:
              content = f.read()

          # Find the section for this version
          pattern = rf'## \[{re.escape(version)}\].*?\n(.*?)(?=\n## \[|\n#[^#]|\Z)'
          match = re.search(pattern, content, re.DOTALL)

          if match:
              changelog_text = match.group(1).strip()
              changelog_text = re.sub(r'\n### ', '\n\n### ', changelog_text)
              changelog_text = re.sub(r'\n- ', '\n‚Ä¢ ', changelog_text)
              
              with open('release_notes.md', 'w') as f:
                  f.write(f'# YouTube Blur Remover v{version}\n\n')
                  f.write('## What'\''s New\n\n')
                  f.write(changelog_text)
                  f.write('\n\n## Installation\n\n')
                  f.write(f'1. Download the youtube-blur-remover-v{version}-webstore.zip file\n')
                  f.write('2. Go to chrome://extensions/ in Chrome\n')
                  f.write('3. Enable \"Developer mode\"\n')
                  f.write('4. Click \"Load unpacked\" and select the extracted folder\n\n')
                  f.write('Or install from the [Chrome Web Store](https://chrome.google.com/webstore) when available\n\n')
                  f.write('## Support\n\n')
                  f.write('üíñ Support this free extension: [Ko-fi](https://ko-fi.com/presdec)\n')
                  f.write('üêõ Report issues: [GitHub Issues](https://github.com/${{ github.repository }}/issues)\n')
          else:
              with open('release_notes.md', 'w') as f:
                  f.write(f'# YouTube Blur Remover v{version}\n\n')
                  f.write('New release of the YouTube Blur Remover extension.\n')
          "

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: YouTube Blur Remover ${{ steps.version.outputs.new_version }}
          body_path: release_notes.md
          files: |
            youtube-blur-remover-v*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "üéâ Release ${{ steps.version.outputs.tag_name }} created successfully!"
          echo "üì¶ Extension package: $(ls youtube-blur-remover-v*.zip)"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag_name }}"
